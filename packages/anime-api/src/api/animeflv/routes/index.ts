import express from 'express'
import api from '../api'
const router = express.Router()

/**
 *  @api {get} /LatestAnimeAdded Get list of recently added anime
 *  @apiVersion 1.0.6
 *  @apiName GetLatestAnimeAdded
 *  @apiGroup LastedAnimeAdded
 *
 *  @apiSuccess {String} id           Anime id
 *  @apiSuccess {String} title        Anime title
 *  @apiSuccess {String} poster       Poster (img) on base64
 *  @apiSuccess {String} banner       Background image
 *  @apiSuccess {String} synopsis     Summary information about the story
 *  @apiSuccess {String} debut        Current status of the anime
 *  @apiSuccess {String} type         Type of content
 *  @apiSuccess {String} rating       Overall rating
 *  @apiSuccess {Object[]} genres     Genres to which he belongs
 *  @apiSuccess {Object[]} episodes   List of current episodes
 *  @apiSuccess {String} episodes.nextEpisodeDate Date of the next TV broadcast
 *  @apiSuccess {Number} episodes.episode         Episode number
 *  @apiSuccess {String} episodes.id              Episode id
 *  @apiSuccess {String} episodes.imagePreview    EpisodeDate image preview
 *
 *  @apiSuccessExample {json} Success-Response:
 *  HTTP/1.1 200 OK
 * {
 *    "animes": [
 *      {
 *        "id": "anime/5715/pokemon-pelicula-22-mewtwo-no-gyakushuu-evolution",
 *        "title": "Pokemon Pel√≠cula 22: Mewtwo no Gyakushuu Evolution",
 *        "poster": "",
 *        "banner": "https://animeflv.net/uploads/animes/banners/3276.jpg",
 *        "synopsis": "Pel√≠cula 3.6Uno de los Pok√©mon m√°s poderosos del mundo quiere venganza.",
 *        "debut": "Finalizado",
 *        "type": "Pel√≠cula",
 *        "rating": "3.6",
 *        "genres": [
 *          "accion",
 *          "aventura",
 *          "comedia",
 *          "fantasia",
 *          "infantil"
 *        ],
 *        "episodes": [
 *          {
 *            "nextEpisodeDate": null
 *          },
 *          {
 *            "episode": 1,
 *            "id": "54021/pokemon-pelicula-22-mewtwo-no-gyakushuu-evolution-1",
 *            "imagePreview": "https://cdn.animeflv.net/screenshots/3276/1/th_3.jpg"
 *          }
 *        ]
 *      },
 *    ]
 *  }
 */

router.get('/LatestAnimeAdded', (req, res) => {
  api.latestAnimeAdded()
    .then(animes => {
      res.status(200).json({
        animes
      })
    }).catch((err) => {
      console.error(err)
    })
})

/**
 *  @api {get} /LatestEpisodesAdded Get list of all recently added chapters
 *  @apiVersion 1.0.6
 *  @apiName GetLatestEpisodesAdded
 *  @apiGroup LatestEpisodesAdded
 *
 *  @apiSuccess {String} id                     Episode id
 *  @apiSuccess {String} title                  Anime title
 *  @apiSuccess {String} poster                 Poster (img) on base64
 *  @apiSuccess {Number} episode                Episode number
 *  @apiSuccess {Object[]} servers              List of servers available for the episode
 *  @apiSuccess {String} servers.server         Server name
 *  @apiSuccess {String} servers.url            Video URL
 *  @apiSuccess {String} servers.title          Server temp name
 *  @apiSuccess {Boolean} servers.allow_mobile  N/A
 *  @apiSuccess {String} servers.code           Video URL
 *
 *  @apiSuccessExample {json} Success-Response:
 *  HTTP/1.1 200 OK
 * {
 * "episodes": [
 *   {
 *     "id": "54027/haikyuu-to-the-top-8",
 *     "title": "Haikyuu!!: To the Top",
 *     "poster": "",
 *     "episode": 8,
 *     "servers": [
 *       {
 *         "server": "natsuki",
 *         "title": "Natsuki",
 *         "allow_mobile": true,
 *         "code": "https://s1.animeflv.net/embed.php?s=natsuki&v=THVKOEo0SElCSlFWWDZKMkQzUzYxV2V6blBFK2pFMEZmMkVPWEt3WERDVkRvbEl5MTRDVVFNNFlKT200YS9DRUJvT0RoMkZBUHJJcm9HKzBTa0xlUFFEOVBYbGdPcjl3VFhjc1dUVkF1UmJvbUN4SWFXZTQ1QUI1NjdYb0hmSTM0ckN5d29JeUZsR2s3TEp0ZkxjWTl3PT0="
 *       },
 *       {
 *         "server": "fembed",
 *         "title": "Fembed",
 *         "allow_mobile": true,
 *         "code": "https://embedsito.com/v/7rl7dfgx5lmzk8m"
 *       },
 *       {
 *         "server": "mega",
 *         "title": "MEGA",
 *         "url": "https://mega.nz/#!rfxzgI4R!0vIb1XjaAsSSzZe2cvr4ycjsdmRXqyZWldWqm5Ia-1U",
 *         "allow_mobile": true,
 *         "code": "https://mega.nz/embed#!rfxzgI4R!0vIb1XjaAsSSzZe2cvr4ycjsdmRXqyZWldWqm5Ia-1U"
 *       },
 *       {
 *         "server": "okru",
 *         "title": "Okru",
 *         "allow_mobile": true,
 *         "code": "https://ok.ru/videoembed/1625140431472"
 *       },
 *       {
 *         "server": "yu",
 *         "title": "YourUpload",
 *         "allow_mobile": true,
 *         "code": "https://www.yourupload.com/embed/SYDvT1FvNCDu"
 *       },
 *       {
 *         "server": "maru",
 *         "title": "Maru",
 *         "allow_mobile": true,
 *         "code": "https://my.mail.ru/video/embed/8995617145282895595#budyak.rus#7915"
 *       },
 *       {
 *         "server": "netu",
 *         "title": "Netu",
 *         "allow_mobile": true,
 *         "code": "https://hqq.tv/player/embed_player.php?vid=bDFrdWQ3RURGMFhrdmthcXlrT2I0dz09"
 *       }
 *     ]
 *   },
 */

router.get('/LatestEpisodesAdded', (req, res) => {
  api.latestEpisodesAdded()
    .then(episodes => {
      res.status(200).json({
        episodes
      })
    }).catch((err) => {
      console.error(err)
    })
})

/**
 *  @api {get} /GetAnimeServers/:id Get list of all servers available for the anime episode.
 *  @apiVersion 1.0.6
 *  @apiName GetAnimeServers
 *  @apiGroup GetAnimeServers
 *
 *  @apiSuccess {Object[]} servers              List of servers available for the episode
 *  @apiSuccess {String} servers.server         Server name
 *  @apiSuccess {String} servers.url            Video URL
 *  @apiSuccess {String} servers.title          Server temp name
 *  @apiSuccess {Boolean} servers.allow_mobile  N/A
 *  @apiSuccess {String} servers.code           Video URL
 *
 *  @apiParam {String} id Episode id
 *
 *  @apiParamExample {json} You will find the `id` of each chapter in the `episodes` property
 *  {
 *    "episodes": [
 *       {
 *         "nextEpisodeDate": null
 *       },
 *       {
 *         "episode": 12,
 *         "id": "28800/tokyo-ghoul-12",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/12/th_3.jpg"
 *       },
 *        //......
 *     ]
 *  }
 *
 *  @apiSuccessExample {json} Success-Response:
 *  HTTP/1.1 200 OK
 *   {
 *     "servers": [
 *       {
 *         "server": "amus",
 *         "title": "Izanagi",
 *         "allow_mobile": true,
 *         "code": "https://s1.animeflv.net/embed.php?s=izanagi&v=RXJZUU5VSmRZRWZBSjhqazZiUUh6ZVhXY0JoUWxTU1FzTTBZVEh4OGNoT3FXNVF3amVPZGJxdWllRXhDYmNUaytjenlOdG9wVnlGdWdhUm1zSlovZlFWZy94SnFCK3RhWUxlYVAyY3FiRm56dkl4SXR1VzBVOVZGTDloRlJWZ3NZSVR3TW5peGhTMFN4cTkwc09tOWtBPT0="
 *       },
 *       {
 *         "server": "fembed",
 *         "title": "Fembed",
 *         "allow_mobile": true,
 *         "code": "https://embedsito.com/v/8xopp837qo7"
 *       },
 *       {
 *         "server": "mega",
 *         "title": "MEGA",
 *         "url": "https://mega.nz/#!55InSaxI!5JTxVNA29LCFNr7c1Fxg0PUBQPVQyXBo4aVF3e06jN0",
 *         "allow_mobile": true,
 *         "code": "https://mega.nz/embed#!55InSaxI!5JTxVNA29LCFNr7c1Fxg0PUBQPVQyXBo4aVF3e06jN0"
 *       },
 *       {
 *         "server": "yu",
 *         "title": "YourUpload",
 *         "allow_mobile": true,
 *         "code": "https://www.yourupload.com/embed/21KnA1854827"
 *       },
 *       {
 *         "server": "netu",
 *         "title": "Netu",
 *         "allow_mobile": true,
 *         "code": "https://hqq.tv/player/embed_player.php?vid=8B98HMBDSA95"
 *       }
 *     ]
 *   }
 */

router.get('/GetAnimeServers/:id([^/]+/[^/]+)', (req, res) => {
  const id = req.params.id
  api.getAnimeServers(id)
    .then(servers => {
      res.status(200).json({
        servers
      })
    }).catch((err) => {
      console.error(err)
    })
})

/**
 *  @api {get} /Genres/:genre/:sortBy/:page Get list of Anime by genres
 *  @apiSampleRequest https://animeflv.chrismichael.now.sh/api/v1/Genres/:genre/:sortBy/:page
 *  @apiVersion 1.0.6
 *  @apiName GetGenres
 *  @apiGroup Genres
 *
 *  @apiSuccess {String} id           Anime id
 *  @apiSuccess {String} title        Anime title
 *  @apiSuccess {String} poster       Poster (img) on base64
 *  @apiSuccess {String} banner       Background image
 *  @apiSuccess {String} synopsis     Summary information about the story
 *  @apiSuccess {String} debut        Current status of the anime
 *  @apiSuccess {String} type         Type of content
 *  @apiSuccess {String} rating       Overall rating
 *  @apiSuccess {Object[]} genres     Genres to which he belongs
 *  @apiSuccess {Object[]} episodes   List of current episodes
 *  @apiSuccess {String} episodes.nextEpisodeDate Date of the next TV broadcast
 *  @apiSuccess {Number} episodes.episode         Episode number
 *  @apiSuccess {String} episodes.id              Episode id
 *  @apiSuccess {String} episodes.imagePreview    EpisodeDate image preview
 *
 *  @apiParam {String="accion","artes-marciales","aventura","carreras","ciencia-ficcion","comedia","demencia","demonios","deportes","drama","ecchi","escolares","espacial","fantasia","harem","historico","infantil","josei","juegos","magia","mecha","militar","misterio","musica","parodia","psicologico","recuentos-de-la-vida","romance","samurai","seinen","shoujo","shounen","sobrenatural","superpoderes","suspenso","terror","vampiros","yaoi","yuri"} genre
 *  @apiParam {String="default","updated","added","rating","title"} sortBy
 *  @apiParam {Number} page Total page unknown
 *
 *
 *  @apiSuccessExample {json} Success-Response:
 *  HTTP/1.1 200 OK
 * {
 * "animes": [
 *     {
 *       "id": "anime/5713/dorohedoro",
 *       "title": "Dorohedoro",
 *       "poster": "/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx72wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wgARCAFyAQQDA",
 *       "banner": "https://animeflv.net/uploads/animes/banners/3274.jpg",
 *       "synopsis": "La trama se centra en Caiman, un chico que no recuerda quien era despu√©s de haber sido transformado por un hechicero. Esta transformaci√≥n le dej√≥ con la cabeza de un reptil y un deseo de descubrir la verdad sobre qui√©n es realmente.",
 *      "debut": "En emision",
 *      "type": "Anime",
 *      "rating": "0.0",
 *      "genres": [
 *        "accion",
 *        "comedia",
 *        "fantasia",
 *        "seinen",
 *        "terror"
 *      ],
 *      "episodes": [
 *        {
 *          "nextEpisodeDate": "2020-01-17"
 *        },
 *        {
 *          "episode": 7,
 *          "id": "53992/dorohedoro-7",
 *          "imagePreview": "https://cdn.animeflv.net/screenshots/3274/7/th_3.jpg"
 *        },
 *        {
 *          "episode": 6,
 *          "id": "53958/dorohedoro-6",
 *          "imagePreview": "https://cdn.animeflv.net/screenshots/3274/6/th_3.jpg"
 *        },
 *        {
 *          "episode": 5,
 *          "id": "53895/dorohedoro-5",
 *          "imagePreview": "https://cdn.animeflv.net/screenshots/3274/5/th_3.jpg"
 *        },
 *        {
 *          "episode": 4,
 *          "id": "53854/dorohedoro-4",
 *          "imagePreview": "https://cdn.animeflv.net/screenshots/3274/4/th_3.jpg"
 *        },
 *        {
 *          "episode": 3,
 *          "id": "53789/dorohedoro-3",
 *          "imagePreview": "https://cdn.animeflv.net/screenshots/3274/3/th_3.jpg"
 *        },
 *        {
 *          "episode": 2,
 *          "id": "53755/dorohedoro-2",
 *          "imagePreview": "https://cdn.animeflv.net/screenshots/3274/2/th_3.jpg"
 *        },
 *        {
 *          "episode": 1,
 *          "id": "53705/dorohedoro-1",
 *          "imagePreview": "https://cdn.animeflv.net/screenshots/3274/1/th_3.jpg"
 *        }
 *      ]
 *    },
 *
 */

router.get('/Genres/:genre/:order/:page', (req, res) => {
  const genre = req.params.genre
  const order = req.params.order
  const page = req.params.page
  api.animeByGenres(genre, order, page)
    .then(animes => {
      res.status(200).json({
        animes
      })
    }).catch((err) => {
      console.error(err)
    })
})

/**
 *  @api {get} /Movies/:sortBy/:page Get list of Movies
 *  @apiSampleRequest https://animeflv.chrismichael.now.sh/api/v1/Movies/:sortBy/:page
 *  @apiVersion 1.0.6
 *  @apiName GetMovies
 *  @apiGroup Movies
 *
 *  @apiSuccess {String} id           Anime id
 *  @apiSuccess {String} title        Anime title
 *  @apiSuccess {String} poster       Poster (img) on base64
 *  @apiSuccess {String} banner       Background image
 *  @apiSuccess {String} synopsis     Summary information about the story
 *  @apiSuccess {String} debut        Current status of the anime
 *  @apiSuccess {String} type         Type of content
 *  @apiSuccess {String} rating       Overall rating
 *  @apiSuccess {Object[]} genres     Genres to which he belongs
 *  @apiSuccess {Object[]} episodes   List of current episodes
 *  @apiSuccess {String} episodes.nextEpisodeDate Date of the next TV broadcast
 *  @apiSuccess {Number} episodes.episode         Episode number
 *  @apiSuccess {String} episodes.id              Episode id
 *  @apiSuccess {String} episodes.imagePreview    EpisodeDate image preview
 *
 *
 *  @apiParam {String="default","updated","added","rating","title"} sortBy
 *  @apiParam {Number} page Total page unknown
 *
 *  @apiSuccessExample {json} Success-Response:
 *  {
 *   "movies": [
 *     {
 *       "id": "anime/5698/kyochuu-rettou-movie",
 *       "title": "Kyochuu Rettou Movie",
 *       "poster": "UklGRqiGAABXRUJQVlA4IJyGAADQTgGdASoEAXIBPk0ei0QioaEXu/cYKATEoA0I5qWd9Yu5r4n+V/c72VOQe2731+C/Wv+F97XXL2H5bfR3/Q+7P5b/8T9pPfL+sP",
 *       "banner": "https://animeflv.net/uploads/animes/banners/3259.jpg",
 *       "synopsis": "Despu√©s de un accidente de avi√≥n durante un viaje escolar, Oribe Mutsumi y sus compa√±eros de clase quedaron varados en una isla aparentemente desierta. Mutsumi encontr√≥ a los otros sobrevivientes y us√≥ sus conocimientos para ayudarlos. Estos esperan a ser rescatados al menos en tres d√≠as, lo que no parece ser mucho tiempo. Sin embargo, Mutsu...",
 *       "debut": "Finalizado",
 *       "type": "Pel√≠cula",
 *       "rating": "4.4",
 *       "genres": [
 *         "terror"
 *       ],
 *       "episodes": [
 *         {
 *           "nextEpisodeDate": null
 *         },
 *         {
 *           "episode": 1,
 *           "id": "53644/kyochuu-rettou-movie-1",
 *           "imagePreview": "https://cdn.animeflv.net/screenshots/3259/1/th_3.jpg"
 *         }
 *       ]
 *     },
 *      // .....
 *    ]
 *  }
 */

router.get('/Movies/:order/:page', (req, res) => {
  const order = req.params.order
  const page = req.params.page
  api.movies(order, page)
    .then(movies => {
      res.status(200).json({
        movies
      })
    }).catch((err) => {
      console.error(err)
    })
})

/**
 *  @api {get} /Special/:sortBy/:page Get list of Special Anime
 *  @apiSampleRequest https://animeflv.chrismichael.now.sh/api/v1/Special/:sortBy/:page
 *  @apiVersion 1.0.6
 *  @apiName GetSpecial
 *  @apiGroup Special
 *
 *  @apiSuccess {String} id           Anime id
 *  @apiSuccess {String} title        Anime title
 *  @apiSuccess {String} poster       Poster (img) on base64
 *  @apiSuccess {String} banner       Background image
 *  @apiSuccess {String} synopsis     Summary information about the story
 *  @apiSuccess {String} debut        Current status of the anime
 *  @apiSuccess {String} type         Type of content
 *  @apiSuccess {String} rating       Overall rating
 *  @apiSuccess {Object[]} genres     Genres to which he belongs
 *  @apiSuccess {Object[]} episodes   List of current episodes
 *  @apiSuccess {String} episodes.nextEpisodeDate Date of the next TV broadcast
 *  @apiSuccess {Number} episodes.episode         Episode number
 *  @apiSuccess {String} episodes.id              Episode id
 *  @apiSuccess {String} episodes.imagePreview    EpisodeDate image preview
 *
 *
 *  @apiParam {String="default","updated","added","rating","title"} sortBy
 *  @apiParam {Number} page Total page unknown
 *
 *  @apiSuccessExample {json} Success-Response:
 *
 * {
 *     "special": [
 *       {
 *         "id": "anime/5620/fategrand-order-zettai-majuu-sensen-babylonia-initium-iter",
 *         "title": "Fate/Grand Order: Zettai Majuu Sensen Babylonia - Initium Iter",
 *         "poster": "UklGRgZNAABXRUJQVlA4IPpMAACQ+ACdASoEAXIBPlEijkUjoiEpKFYL4SAKCWNuDsiTKrm8nGcqJ8frlx/82zZ+r/S/7b8ie0rvk6/8yvoz/ufdV8vP+n68/",
 *         "banner": "https://animeflv.net/uploads/animes/banners/3181.jpg",
 *         "synopsis": "A√±o 2017. La √∫ltima era en la que existi√≥ la magia. Los humanos crearon la sociedad, pero los Magos fueron quienes consiguieron alcanzar la verdad del mundo. La magia se compone de t√©cnicas del pasado que la ciencia no puede explicar, mientras que la ciencia se compone de t√©cnicas del futuro que la magia no puede alcanzar. Estudiosos e investi...",
 *         "debut": "Finalizado",
 *         "type": "Especial",
 *         "rating": "4.6",
 *         "genres": [
 *           "accion",
 *           "fantasia",
 *           "magia",
 *           "sobrenatural"
 *         ],
 *         "episodes": [
 *           {
 *             "nextEpisodeDate": null
 *           },
 *           {
 *             "episode": 0,
 *             "id": "52745/fategrand-order-zettai-majuu-sensen-babylonia-initium-iter-0",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3181/0/th_3.jpg"
 *           }
 *         ]
 *       },
 *       //.....
 *     ]
 */

router.get('/Special/:order/:page', (req, res) => {
  const order = req.params.order
  const page = req.params.page
  api.special(order, page)
    .then(special => {
      res.status(200).json({
        special
      })
    }).catch((err) => {
      console.error(err)
    })
})

/**
 *  @api {get} /Ova/:sortBy/:page Get list of Ovas
 *  @apiSampleRequest https://animeflv.chrismichael.now.sh/api/v1/Ova/:sortBy/:page
 *  @apiVersion 1.0.6
 *  @apiName GetOva
 *  @apiGroup Ova
 *
 *  @apiSuccess {String} id           Anime id
 *  @apiSuccess {String} title        Anime title
 *  @apiSuccess {String} poster       Poster (img) on base64
 *  @apiSuccess {String} banner       Background image
 *  @apiSuccess {String} synopsis     Summary information about the story
 *  @apiSuccess {String} debut        Current status of the anime
 *  @apiSuccess {String} type         Type of content
 *  @apiSuccess {String} rating       Overall rating
 *  @apiSuccess {Object[]} genres     Genres to which he belongs
 *  @apiSuccess {Object[]} episodes   List of current episodes
 *  @apiSuccess {String} episodes.nextEpisodeDate Date of the next TV broadcast
 *  @apiSuccess {Number} episodes.episode         Episode number
 *  @apiSuccess {String} episodes.id              Episode id
 *  @apiSuccess {String} episodes.imagePreview    EpisodeDate image preview
 *
 *
 *  @apiParam {String="default","updated","added","rating","title"} sortBy
 *  @apiParam {Number} page Total page unknown
 *
 *  @apiSuccessExample {json} Success-Response:
 *
 * {
 *   "ova": [
 *     {
 *       "id": "anime/5714/tsugumomo-ova",
 *       "title": "Tsugumomo OVA",
 *       "poster": "UklGRo5iAABXRUJQVlA4IIJiAACQIgGdASoEAXIBPlEgjUSjoiEVmhbwOAUEo+8dvx0ytgVT4Bkq/ADQ0D74YWh9bvFdFnyL4SfWvxPDq2h50b2f/",
 *       "banner": "https://animeflv.net/uploads/animes/banners/3275.jpg",
 *       "synopsis": "Kazuya Kagami nunca va a ning√∫n lado sin su preciada ‚ÄúSakura Obi‚Äù que su madre le regal√≥. Un d√≠a, una hermosa chica vestida con un kimono llamada Kiriha aparece ante √©l. Naturalmente, ella comienza a vivir en su habitaci√≥n. ¬øNaturalmente? ¬°Esto solo es el inicio de la embarazosa y confusa (y por supuesto feliz) nueva vida de Kazuya!",
 *      "debut": "Finalizado",
 *      "type": "OVA",
 *      "rating": "5.0",
 *      "genres": [
 *        "accion",
 *        "comedia",
 *        "ecchi",
 *        "escolares",
 *        "seinen",
 *        "sobrenatural"
 *      ],
 *      "episodes": [
 *        {
 *          "nextEpisodeDate": null
 *        },
 *        {
 *          "episode": 1,
 *          "id": "53753/tsugumomo-ova-1",
 *          "imagePreview": "https://cdn.animeflv.net/screenshots/3275/1/th_3.jpg"
 *        }
 *      ]
 *    },
 *    //.....
 *  ]
 *}
 */

router.get('/Ova/:order/:page', (req, res) => {
  const order = req.params.order
  const page = req.params.page
  api.ova(order, page)
    .then(ova => {
      res.status(200).json({
        ova
      })
    }).catch((err) => {
      console.error(err)
    })
})

/**
 *  @api {get} /TV/:sortBy/:page Get list of Anime in tv
 *  @apiSampleRequest https://animeflv.chrismichael.now.sh/api/v1/TV/:sortBy/:page
 *  @apiVersion 1.0.6
 *  @apiName GetTV
 *  @apiGroup TV
 *
 *  @apiSuccess {String} id           Anime id
 *  @apiSuccess {String} title        Anime title
 *  @apiSuccess {String} poster       Poster (img) on base64
 *  @apiSuccess {String} banner       Background image
 *  @apiSuccess {String} synopsis     Summary information about the story
 *  @apiSuccess {String} debut        Current status of the anime
 *  @apiSuccess {String} type         Type of content
 *  @apiSuccess {String} rating       Overall rating
 *  @apiSuccess {Object[]} genres     Genres to which he belongs
 *  @apiSuccess {Object[]} episodes   List of current episodes
 *  @apiSuccess {String} episodes.nextEpisodeDate Date of the next TV broadcast
 *  @apiSuccess {Number} episodes.episode         Episode number
 *  @apiSuccess {String} episodes.id              Episode id
 *  @apiSuccess {String} episodes.imagePreview    EpisodeDate image preview
 *
 *
 *  @apiParam {String="default","updated","added","rating","title"} sortBy
 *  @apiParam {Number} page Total page unknown
 *
 *  @apiSuccessExample {json} Success-Response:
 *
 *   {
 *     "tv": [
 *       {
 *         "id": "anime/5712/isekai-quartet-2nd-season",
 *         "title": "Isekai Quartet 2nd Season",
 *         "poster": "/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/",
 *         "banner": "https://animeflv.net/uploads/animes/banners/3273.jpg",
 *         "synopsis": "Segunda tempo de Isekai Quartet",
 *         "debut": "En emision",
 *         "type": "Anime",
 *         "rating": "0.0",
 *         "genres": [
 *           "comedia",
 *           "fantasia",
 *           "parodia"
 *         ],
 *         "episodes": [
 *           {
 *             "nextEpisodeDate": "2020-03-03"
 *           },
 *           {
 *             "episode": 7,
 *             "id": "54002/isekai-quartet-2nd-season-7",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/7/th_3.jpg"
 *           },
 *           {
 *             "episode": 6,
 *             "id": "53951/isekai-quartet-2nd-season-6",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/6/th_3.jpg"
 *           },
 *           {
 *             "episode": 5,
 *             "id": "53899/isekai-quartet-2nd-season-5",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/5/th_3.jpg"
 *           },
 *           {
 *             "episode": 4,
 *             "id": "53845/isekai-quartet-2nd-season-4",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/4/th_3.jpg"
 *           },
 *           {
 *             "episode": 3,
 *             "id": "53798/isekai-quartet-2nd-season-3",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/3/th_3.jpg"
 *           },
 *           {
 *             "episode": 2,
 *             "id": "53742/isekai-quartet-2nd-season-2",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/2/th_3.jpg"
 *           },
 *           {
 *             "episode": 1,
 *             "id": "53682/isekai-quartet-2nd-season-1",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/1/th_3.jpg"
 *           }
 *         ]
 *       },
 *       //.....
 *     ]
 *   }
 */

router.get('/TV/:order/:page', (req, res) => {
  const order = req.params.order
  const page = req.params.page
  api.tv(order, page)
    .then(tv => {
      res.status(200).json({
        tv
      })
    }).catch((err) => {
      console.error(err)
    })
})

/**
 *  @api {get} /AnimeByState/:state/:sortBy/:page Get list of Anime in tv
 *  @apiSampleRequest https://animeflv.chrismichael.now.sh/api/v1/AnimeByState/:state/:sortBy/:page
 *  @apiVersion 1.0.6
 *  @apiName GetAnimeByState
 *  @apiGroup AnimeByState
 *
 *  @apiSuccess {String} id           Anime id
 *  @apiSuccess {String} title        Anime title
 *  @apiSuccess {String} poster       Poster (img) on base64
 *  @apiSuccess {String} banner       Background image
 *  @apiSuccess {String} synopsis     Summary information about the story
 *  @apiSuccess {String} debut        Current status of the anime
 *  @apiSuccess {String} type         Type of content
 *  @apiSuccess {String} rating       Overall rating
 *  @apiSuccess {Object[]} genres     Genres to which he belongs
 *  @apiSuccess {Object[]} episodes   List of current episodes
 *  @apiSuccess {String} episodes.nextEpisodeDate Date of the next TV broadcast
 *  @apiSuccess {Number} episodes.episode         Episode number
 *  @apiSuccess {String} episodes.id              Episode id
 *  @apiSuccess {String} episodes.imagePreview    EpisodeDate image preview
 *
 *
 *  @apiParam {Number=1,2,3} state
 *  @apiParam {String="default","updated","added","rating","title"} sortBy
 *  @apiParam {Number} page Total page unknown
 *
 *  @apiDescription {state = 1} In Emission | {state = 2} Finalized | {state = 3} Coming Soon
 *
 *  @apiSuccessExample {json} Success-Response:
 *
 *   {
 *     "animes": [
 *       {
 *         "id": "anime/5712/isekai-quartet-2nd-season",
 *         "title": "Isekai Quartet 2nd Season",
 *         "poster": "/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/",
 *         "banner": "https://animeflv.net/uploads/animes/banners/3273.jpg",
 *         "synopsis": "Segunda tempo de Isekai Quartet",
 *         "debut": "En emision",
 *         "type": "Anime",
 *         "rating": "0.0",
 *         "genres": [
 *           "comedia",
 *           "fantasia",
 *           "parodia"
 *         ],
 *         "episodes": [
 *           {
 *             "nextEpisodeDate": "2020-03-03"
 *           },
 *           {
 *             "episode": 7,
 *             "id": "54002/isekai-quartet-2nd-season-7",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/7/th_3.jpg"
 *           },
 *           {
 *             "episode": 6,
 *             "id": "53951/isekai-quartet-2nd-season-6",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/6/th_3.jpg"
 *           },
 *           {
 *             "episode": 5,
 *             "id": "53899/isekai-quartet-2nd-season-5",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/5/th_3.jpg"
 *           },
 *           {
 *             "episode": 4,
 *             "id": "53845/isekai-quartet-2nd-season-4",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/4/th_3.jpg"
 *           },
 *           {
 *             "episode": 3,
 *             "id": "53798/isekai-quartet-2nd-season-3",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/3/th_3.jpg"
 *           },
 *           {
 *             "episode": 2,
 *             "id": "53742/isekai-quartet-2nd-season-2",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/2/th_3.jpg"
 *           },
 *           {
 *             "episode": 1,
 *             "id": "53682/isekai-quartet-2nd-season-1",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/3273/1/th_3.jpg"
 *           }
 *         ]
 *       },
 *       //.....
 *     ]
 *   }
 */

router.get('/AnimeByState/:state/:order/:page', (req, res) => {
  const state = req.params.state
  const order = req.params.order
  const page = req.params.page
  api.animeByState(state, order, page)
    .then(animes => {
      res.status(200).json({
        animes
      })
    }).catch((err) => {
      console.error(err)
    })
})

/**
 *  @api {get} /Search/:query Get anime list by doing a search
 *  @apiSampleRequest https://animeflv.chrismichael.now.sh/api/v1/Search/:query
 *  @apiVersion 1.0.6
 *  @apiName Search
 *  @apiGroup Search
 *
 *  @apiSuccess {String} id           Anime id
 *  @apiSuccess {String} title        Anime title
 *  @apiSuccess {String} poster       Poster (img) on base64
 *  @apiSuccess {String} banner       Background image
 *  @apiSuccess {String} synopsis     Summary information about the story
 *  @apiSuccess {String} debut        Current status of the anime
 *  @apiSuccess {String} type         Type of content
 *  @apiSuccess {String} rating       Overall rating
 *  @apiSuccess {Object[]} genres     Genres to which he belongs
 *  @apiSuccess {Object[]} episodes   List of current episodes
 *  @apiSuccess {String} episodes.nextEpisodeDate Date of the next TV broadcast
 *  @apiSuccess {Number} episodes.episode         Episode number
 *  @apiSuccess {String} episodes.id              Episode id
 *  @apiSuccess {String} episodes.imagePreview    EpisodeDate image preview
 *
 *
 *  @apiParam {String} query Anime title
 *
 *  @apiSuccessExample {json} Success-Response:
 *
 *{
 * "search": [
 *   {
 *     "id": "anime/5227/tokyo-ghoul-jack",
 *     "title": "Tokyo Ghoul: Jack",
 *     "poster": "UklGRphjAABXRUJQVlA4IIxjAABQIwGdASoEAXIBPlEgjUSjoiEVKX7oOAUEsRPwimXsFebXP77/w/Ne477kfaf4D9ee0Hrq7V8uXor/0f5v8rfmV/t/Wj/Sv9h/5fcZ",
 *     "banner": "https://animeflv.net/uploads/animes/banners/2285.jpg",
 *     "synopsis": "En Tokyo Ghoul: Jack, seguimos un incidente relacionado con un Ghoul devorador de humanos en el Distrito 13 de Tokio. Para descubrir la verdad de lo ocurrido a su amigo, el estudiante de instituto Taishi Fura persigue al Ghoul conocido como Lantern acompa√±ado del joven investigador Kisho Arima. La historia cuenta c√≥mo Arima y Fura se ...",
 *     "debut": "Finalizado",
 *     "type": "OVA",
 *     "rating": "4.5",
 *     "genres": [
 *       "accion",
 *       "drama",
 *       "escolares",
 *       "seinen",
 *       "sobrenatural",
 *       "terror"
 *     ],
 *     "episodes": [
 *       {
 *         "nextEpisodeDate": null
 *       },
 *       {
 *         "episode": 1,
 *         "id": "37923/tokyo-ghoul-jack-1",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/2285/1/th_3.jpg"
 *       }
 *     ]
 *   },
 *   {
 *     "id": "anime/5226/tokyo-ghoul",
 *     "title": "Tokyo Ghoul",
 *     "poster": "UklGRlxiAABXRUJQVlA4IFBiAABwOgGdASoEAXIBPlEgjUSjoiErLPQtoWAKCWIAyBfoz0ff/ml7OXH/cH7o+8frT2t9xXZvl/dFf97/Gf5j9vflj/zP/J7Yv1p/6/cQ",
 *     "banner": "https://animeflv.net/uploads/animes/banners/1415.jpg",
 *     "synopsis": "Extra√±os asesinatos se est√°n sucediendo uno tras otro en Tokyo. Debido a las pruebas encontradas en las escenas, la polic√≠a concluye que los ataques son obra de ghouls que se comen a las personas. Kaneki y Hide, dos compa√±eros de clase, llegan a la conclusi√≥n de que si nadie ha visto nunca a esos necr√≥fagos...",
 *     "debut": "Finalizado",
 *     "type": "Anime",
 *     "rating": "4.5",
 *     "genres": [
 *       "accion",
 *       "drama",
 *       "misterio",
 *       "psicologico",
 *       "seinen",
 *       "sobrenatural",
 *       "terror"
 *     ],
 *     "episodes": [
 *       {
 *         "nextEpisodeDate": null
 *       },
 *       {
 *         "episode": 12,
 *         "id": "28800/tokyo-ghoul-12",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/12/th_3.jpg"
 *       },
 *       {
 *         "episode": 11,
 *         "id": "28459/tokyo-ghoul-11",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/11/th_3.jpg"
 *       },
 *       {
 *         "episode": 10,
 *         "id": "28001/tokyo-ghoul-10",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/10/th_3.jpg"
 *       },
 *       {
 *         "episode": 9,
 *         "id": "27741/tokyo-ghoul-9",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/9/th_3.jpg"
 *       },
 *       {
 *         "episode": 8,
 *         "id": "27092/tokyo-ghoul-8",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/8/th_3.jpg"
 *       },
 *       {
 *         "episode": 7,
 *         "id": "26689/tokyo-ghoul-7",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/7/th_3.jpg"
 *       },
 *       {
 *         "episode": 6,
 *         "id": "26529/tokyo-ghoul-6",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/6/th_3.jpg"
 *       },
 *       {
 *         "episode": 5,
 *         "id": "26431/tokyo-ghoul-5",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/5/th_3.jpg"
 *       },
 *       {
 *         "episode": 4,
 *         "id": "26373/tokyo-ghoul-4",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/4/th_3.jpg"
 *       },
 *       {
 *         "episode": 3,
 *         "id": "26278/tokyo-ghoul-3",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/3/th_3.jpg"
 *       },
 *       {
 *         "episode": 2,
 *         "id": "26188/tokyo-ghoul-2",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/2/th_3.jpg"
 *       },
 *       {
 *         "episode": 1,
 *         "id": "26103/tokyo-ghoul-1",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/1/th_3.jpg"
 *       }
 *     ]
 *   },
 *    //.....
 *  ]
 * }
 */

router.get('/Search/:query', (req, res) => {
  const query = req.params.query
  api.search(query)
    .then(search => {
      res.status(200).json({
        search
      })
    }).catch((err) => {
      console.error(err)
    })
})

/**
 *  @api {get} /AnimeCharacters/:title Get list of characters from a particular anime
 *  @apiSampleRequest https://animeflv.chrismichael.now.sh/api/v1/AnimeCharacters/:title
 *  @apiVersion 1.0.6
 *  @apiName GetAnimeCharacters
 *  @apiGroup AnimeCharacters
 *
 *  @apiSuccess {String[]} characters     List of Characters
 *  @apiSuccess {String} characters.id    Character id
 *  @apiSuccess {String} characters.name  Character name
 *  @apiSuccess {String} characters.role  Character specific role
 *
 *  @apiParam {String} title Anime title
 *
 *  @apiParamExample {json} You should use the `title` property of the anime.
 *  {
 *    "title": "Tokyo Ghoul",
 *  }
 *
 *  @apiSuccessExample {json} Success-Response:
 *  HTTP/1.1 200 OK
 *   {
 *     "characters": [
 *       {
 *         "character": {
 *           "id": 87275,
 *           "name": "Kaneki, Ken",
 *           "image": "https://cdn.myanimelist.net/images/characters/9/251339.jpg?s=788e4d76ff697c9ee67b65b68b6e8157",
 *           "role": "Main"
 *         }
 *       },
 *       {
 *         "character": {
 *           "id": 87277,
 *           "name": "Kirishima, Touka",
 *           "image": "https://cdn.myanimelist.net/images/characters/16/234699.jpg?s=10ef474344779135236911013b0925fc",
 *           "role": "Main"
 *         }
 *       },
 *       {
 *         "character": {
 *           "id": 113779,
 *           "name": "Abe, Maiko",
 *           "image": "https://cdn.myanimelist.net/images/characters/16/259779.jpg?s=67ed4d2dfb07359d050eb3a0ec91ca8d",
 *           "role": "Supporting"
 *         }
 *       },
 *       {
 *         "character": {
 *           "id": 99671,
 *           "name": "Amon, Koutarou",
 *           "image": "https://cdn.myanimelist.net/images/characters/13/251453.jpg?s=cf7bdc7cb409357d69720b0aee488ff6",
 *           "role": "Supporting"
 *         }
 *       },
 *       {
 *         "character": {
 *           "id": 111767,
 *           "name": "Arima, Kishou ",
 *           "image": "https://cdn.myanimelist.net/images/characters/5/257935.jpg?s=774409608456392dcaca31f53234bb53",
 *           "role": "Supporting"
 *         }
 *       },
 *       {
 *         "character": {
 *           "id": 112687,
 *           "name": "Banjou, Kazuichi",
 *           "image": "https://cdn.myanimelist.net/images/characters/8/258499.jpg?s=f4c8bd78f37677f38a47a8e28b8e7056",
 *           "role": "Supporting"
 *         }
 *       },
 *       {
 *         "character": {
 *           "id": 110241,
 *           "name": "Enji, Koma",
 *           "image": "https://cdn.myanimelist.net/images/characters/15/257941.jpg?s=f6702db6de1a2f2829577a566d3e43ce",
 *           "role": "Supporting"
 *         }
 *       },
 *     ]
 *   }
 */

router.get('/AnimeCharacters/:title', (req, res) => {
  const title = req.params.title.toString()
  api.getAnimeCharacters(title)
    .then(characters => {
      res.status(200).json({
        characters
      })
    }).catch((err) => {
      console.error(err)
    })
})

/**
 *  @api {get} /AnimeTrailers/:title Get ist of promotional videos
 *  @apiSampleRequest https://animeflv.chrismichael.now.sh/api/v1/AnimeTrailers/:title
 *  @apiVersion 1.0.6
 *  @apiName GetAnimeTrailers
 *  @apiGroup AnimeTrailers
 *
 *  @apiSuccess {String[]} trailers             List of promo
 *  @apiSuccess {String} trailers.title         Promo title
 *  @apiSuccess {String} trailers.previewImage  Preview image
 *  @apiSuccess {String} trailers.videoURL      Promotional video from youtube.
 *
 *  @apiParam {String} title Anime title
 *
 *  @apiParamExample {json} You should use the `title` property of the anime.
 *  {
 *    "title": "Tokyo Ghoul",
 *  }
 *
 *  @apiSuccessExample {json} Success-Response:
 *  HTTP/1.1 200 OK
 *   {
 *     "trailers": [
 *       {
 *         "title": "PV Madman ver.",
 *         "previewImage": "https://i.ytimg.com/vi/vGuQeQsoRgU/mqdefault.jpg",
 *         "videoURL": "https://www.youtube.com/embed/vGuQeQsoRgU?enablejsapi=1&wmode=opaque&autoplay=1"
 *       },
 *       {
 *         "title": "PV AnimeLab ver.",
 *         "previewImage": "https://i.ytimg.com/vi/ETHpMMV8rJU/mqdefault.jpg",
 *         "videoURL": "https://www.youtube.com/embed/ETHpMMV8rJU?enablejsapi=1&wmode=opaque&autoplay=1"
 *       }
 *     ]
 *   }
 */

router.get('/AnimeTrailers/:title', (req, res) => {
  const title = req.params.title.toString()
  api.getAnimeVideoPromo(title)
    .then(trailers => {
      res.status(200).json({
        trailers
      })
    }).catch((err) => {
      console.error(err)
    })
})

/**
 *  @api {get} /GetAnimeInfo/:id/:title Get list of promotional videos
 *  @apiVersion 1.0.6
 *  @apiName GetAnimeInfo
 *  @apiGroup GetAnimeInfo
 *
*   @apiSuccess {String} id           Anime id
 *  @apiSuccess {String} title        Anime title
 *  @apiSuccess {String} poster       Poster (img) on base64
 *  @apiSuccess {String} banner       Background image
 *  @apiSuccess {String} synopsis     Summary information about the story
 *  @apiSuccess {String} debut        Current status of the anime
 *  @apiSuccess {String} type         Type of content
 *  @apiSuccess {String} rating       Overall rating
 *  @apiSuccess {Object[]} genres     Genres to which he belongs
 *  @apiSuccess {Object[]} episodes   List of current episodes
 *  @apiSuccess {String} episodes.nextEpisodeDate Date of the next TV broadcast
 *  @apiSuccess {Number} episodes.episode         Episode number
 *  @apiSuccess {String} episodes.id              Episode id
 *  @apiSuccess {String} episodes.imagePreview    EpisodeDate image preview
 *  @apiSuccess {Object[]} moreInfo               Extra Information
 *  @apiSuccess {String} moreInfo.titleJapanese   Alternative title in Japanese
 *  @apiSuccess {String} moreInfo.source          anime source
 *  @apiSuccess {Number} moreInfo.totalEpisodes   Total anime episodes
 *  @apiSuccess {String} moreInfo.status          Current Transmission Status
 *  @apiSuccess {String[]} moreInfo.aired         Start and end date of the anime
 *  @apiSuccess {Number} moreInfo.duration        Average duration by episodes
 *  @apiSuccess {Number} moreInfo.rank            Actual ranking position
 *  @apiSuccess {Number} moreInfo.popularity      Popularity value
 *  @apiSuccess {Number} moreInfo.members         Number of Members who support the anime
 *  @apiSuccess {String} moreInfo.premiered       Release date
 *  @apiSuccess {String} moreInfo.broadcast       Broadcast day
 *  @apiSuccess {String[]} moreInfo.producers     Anime Propuctures
 *  @apiSuccess {String[]} moreInfo.licensors     Anime licensors
 *  @apiSuccess {String[]} moreInfo.studios       Anime studios
 *  @apiSuccess {String[]} moreInfo.openingThemes title of the beginning anime song
 *  @apiSuccess {String[]} moreInfo.endingThemes  song title at the end of the anime
 *  @apiSuccess {String[]} moreInfo.promoList     List of promotional videos
 *  @apiSuccess {String[]} moreInfo.charactersList characters List
 *
 *  @apiParam {String} id Anime id
 *  @apiParam {String} title Anime title
 *
 *  @apiParamExample {json} You should use the `title` and the 'id' property of the anime.
 *  {
 *    "id": "anime/5226/tokyo-ghoul",
 *    "title": "Tokyo Ghoul"
 *  }
 *
 *  @apiSuccessExample {json} Success-Response:
 *  HTTP/1.1 200 OK
 *
 *   {
 *     "info": [
 *       {
 *         "id": "anime/5226/tokyo-ghoul",
 *         "title": "Tokyo Ghoul",
 *         "poster": "UklGRlxiAABXRUJQVlA4IFBiAABwOgGdASoEAXIBPlEgjUSjoiErLPQtoWAKCWIAyBfoz0ff/ml7OXH/cH7o+8frT2t9xXZvl/",
 *         "banner": "https://animeflv.net/uploads/animes/banners/1415.jpg",
 *         "synopsis": "Extra√±os asesinatos se est√°n sucediendo uno tras otro en Tokyo. Debido a las pruebas encontradas en las escenas, la polic√≠a concluye que los ataques son obra de ghouls que se comen a las personas. Kaneki y Hide, dos compa√±eros de clase, llegan a la conclusi√≥n de que si nadie ha visto nunca a esos necr√≥fagos es porque toman la apariencia de seres humanos para ocultarse.\nPoco sab√≠an entonces de que su teor√≠a ser√≠a m√°s cierta de lo que pensaban cuando Kaneki es herido de gravedad por un monstruo y comienza a atraerle cada vez m√°s la carne humana‚Ä¶",
 *         "debut": "Finalizado",
 *         "type": "Anime",
 *         "rating": "4.5",
 *         "genres": [
 *           "accion",
 *           "drama",
 *           "misterio",
 *           "psicologico",
 *           "seinen",
 *           "sobrenatural",
 *           "terror"
 *         ],
 *         "episodes": [
 *           {
 *             "nextEpisodeDate": null
 *           },
 *           {
 *             "episode": 12,
 *             "id": "28800/tokyo-ghoul-12",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/1415/12/th_3.jpg"
 *           },
 *           {
 *             "episode": 11,
 *             "id": "28459/tokyo-ghoul-11",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/1415/11/th_3.jpg"
 *           },
 *           {
 *             "episode": 10,
 *             "id": "28001/tokyo-ghoul-10",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/1415/10/th_3.jpg"
 *           },
 *           {
 *             "episode": 9,
 *             "id": "27741/tokyo-ghoul-9",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/1415/9/th_3.jpg"
 *           },
 *           {
 *             "episode": 8,
 *             "id": "27092/tokyo-ghoul-8",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/1415/8/th_3.jpg"
 *           },
 *           {
 *             "episode": 7,
 *             "id": "26689/tokyo-ghoul-7",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/1415/7/th_3.jpg"
 *           },
 *           {
 *             "episode": 6,
 *             "id": "26529/tokyo-ghoul-6",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/1415/6/th_3.jpg"
 *           },
 *           {
 *             "episode": 5,
 *             "id": "26431/tokyo-ghoul-5",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/1415/5/th_3.jpg"
 *           },
 *           {
 *             "episode": 4,
 *             "id": "26373/tokyo-ghoul-4",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/1415/4/th_3.jpg"
 *           },
 *           {
 *             "episode": 3,
 *             "id": "26278/tokyo-ghoul-3",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/1415/3/th_3.jpg"
 *           },
 *           {
 *             "episode": 2,
 *             "id": "26188/tokyo-ghoul-2",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/1415/2/th_3.jpg"
 *           },
 *           {
 *             "episode": 1,
 *             "id": "26103/tokyo-ghoul-1",
 *             "imagePreview": "https://cdn.animeflv.net/screenshots/1415/1/th_3.jpg"
 *           }
 *         ],
 *         "moreInfo": [
 *           {
 *             "titleJapanese": "Êù±‰∫¨Âñ∞Á®Æ-„Éà„Éº„Ç≠„Éß„Éº„Ç∞„Éº„É´-",
 *             "source": "Manga",
 *             "totalEpisodes": 12,
 *             "status": "Finished Airing",
 *             "aired": {
 *               "from": "2014-07-04T00:00:00+00:00",
 *               "to": "2014-09-19T00:00:00+00:00",
 *               "string": "Jul 4, 2014 to Sep 19, 2014"
 *             },
 *             "duration": "24 min per ep",
 *             "rank": 702,
 *             "popularity": 6,
 *             "members": 1386993,
 *             "favorites": 35890,
 *             "premiered": "Summer 2014",
 *             "broadcast": "Fridays at 00:00 (JST)",
 *             "producers": {
 *               "names": [
 *                 "Marvelous AQL",
 *                 "TC Entertainment",
 *                 "Shueisha"
 *               ]
 *             },
 *             "licensors": {
 *               "names": [
 *                 "Funimation"
 *               ]
 *             },
 *             "studios": {
 *               "names": [
 *                 "Studio Pierrot"
 *               ]
 *             },
 *             "openingThemes": [
 *               "\"unravel\" by TK from Ling Tosite Sigure (eps 2-11)"
 *             ],
 *             "endingThemes": [
 *               "\"unravel\" by TK from Ling Tosite Sigure (eps 1, 12)",
 *               "\"Seijatachi (ËÅñËÄÖ„Åü„Å°)\" by People In The Box (eps 2-11)"
 *             ]
 *           }
 *         ],
 *         "promoList": [
 *           {
 *             "title": "PV Madman ver.",
 *             "previewImage": "https://i.ytimg.com/vi/vGuQeQsoRgU/mqdefault.jpg",
 *             "videoURL": "https://www.youtube.com/embed/vGuQeQsoRgU?enablejsapi=1&wmode=opaque&autoplay=1"
 *           },
 *           {
 *             "title": "PV AnimeLab ver.",
 *             "previewImage": "https://i.ytimg.com/vi/ETHpMMV8rJU/mqdefault.jpg",
 *             "videoURL": "https://www.youtube.com/embed/ETHpMMV8rJU?enablejsapi=1&wmode=opaque&autoplay=1"
 *           }
 *         ],
 *         "charactersList": [
 *           {
 *             "character": {
 *               "id": 87275,
 *               "name": "Kaneki, Ken",
 *               "image": "https://cdn.myanimelist.net/images/characters/9/251339.jpg?s=788e4d76ff697c9ee67b65b68b6e8157",
 *               "role": "Main"
 *             }
 *           },
 *           {
 *             "character": {
 *               "id": 87277,
 *               "name": "Kirishima, Touka",
 *               "image": "https://cdn.myanimelist.net/images/characters/16/234699.jpg?s=10ef474344779135236911013b0925fc",
 *               "role": "Main"
 *             }
 *           },
 *           {
 *             "character": {
 *               "id": 113779,
 *               "name": "Abe, Maiko",
 *               "image": "https://cdn.myanimelist.net/images/characters/16/259779.jpg?s=67ed4d2dfb07359d050eb3a0ec91ca8d",
 *               "role": "Supporting"
 *             }
 *           },
 *           {
 *             "character": {
 *               "id": 99671,
 *               "name": "Amon, Koutarou",
 *               "image": "https://cdn.myanimelist.net/images/characters/13/251453.jpg?s=cf7bdc7cb409357d69720b0aee488ff6",
 *               "role": "Supporting"
 *             }
 *           },
 *           {
 *             "character": {
 *               "id": 111767,
 *               "name": "Arima, Kishou ",
 *               "image": "https://cdn.myanimelist.net/images/characters/5/257935.jpg?s=774409608456392dcaca31f53234bb53",
 *               "role": "Supporting"
 *             }
 *           },
 *           {
 *             "character": {
 *               "id": 112687,
 *               "name": "Banjou, Kazuichi",
 *               "image": "https://cdn.myanimelist.net/images/characters/8/258499.jpg?s=f4c8bd78f37677f38a47a8e28b8e7056",
 *               "role": "Supporting"
 *             }
 *           },
 *           {
 *             "character": {
 *               "id": 110241,
 *               "name": "Enji, Koma",
 *               "image": "https://cdn.myanimelist.net/images/characters/15/257941.jpg?s=f6702db6de1a2f2829577a566d3e43ce",
 *               "role": "Supporting"
 *             }
 *           },
 *           //.....
 *         ]
 *       }
 *     ]
 *   }
 */

router.get('/GetAnimeInfo/:id*/:title', (req, res) => {
  const id = `anime${req.params[0]}`
  const title = req.params.title
  api.getAnimeInfo(id, title)
    .then(info => {
      res.status(200).json({
        info
      })
    }).catch((err) => {
      console.log(err)
    })
})

/**
 *  @api {get} /DownloadLinksByEpsId/:id Get Download URls list of the anime chapter.
 *  @apiVersion 1.0.6
 *  @apiName GetDownloadLinksByEpsId
 *  @apiGroup DownloadLinksByEpsId
 *
 *  @apiSuccess {String} server     Server name
 *  @apiSuccess {String} url        Download URL
 *
 *  @apiParam {String} id Episode id
 *
 *  @apiParamExample {json} You will find the `id` of each chapter in the `episodes` property
 *  {
 *    "episodes": [
 *       {
 *         "nextEpisodeDate": null
 *       },
 *       {
 *         "episode": 12,
 *         "id": "28800/tokyo-ghoul-12",
 *         "imagePreview": "https://cdn.animeflv.net/screenshots/1415/12/th_3.jpg"
 *       },
 *        //......
 *     ]
 *  }
 *
 *  @apiSuccessExample {json} Success-Response:
 *  HTTP/1.1 200 OK
 *  {
 *   "downloads": [
 *     {
 *       "server": "MEGA",
 *       "url": "https://mega.nz/#!55InSaxI!5JTxVNA29LCFNr7c1Fxg0PUBQPVQyXBo4aVF3e06jN0"
 *     },
 *     {
 *       "server": "Zippyshare",
 *       "url": "https://www61.zippyshare.com/d/4KKPr5XK/38775/1415_12.mp4"
 *     },
 *     {
 *       "server": "Openload",
 *       "url": "https://openload.co/f/sPXbBXnFikU/"
 *     }
 *   ]
 *  }
 */

router.get('/DownloadLinksByEpsId/:epsId([^/]+/[^/]+)', (req, res) => {
  const epsId = req.params.epsId
  api.downloadLinksByEpsId(epsId)
    .then(downloads => {
      res.status(200).json({
        downloads
      })
    }).catch((err) => {
      console.log(err)
    })
})

module.exports = router
